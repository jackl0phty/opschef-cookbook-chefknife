#!/usr/bin/env ruby

# Include required libraries.
require 'optparse'
require 'faraday'
require 'faraday_middleware'
require 'open3'
require 'colorize'

# Declare variables.
chef_knife_config = '/etc/chef/chefknife'
chef_repo = Dir.pwd
chef_repo_environments = "#{chef_repo}/environments"
chef_repo_roles = "#{chef_repo}/roles"
chef_repo_cookbooks = "#{chef_repo}/cookbooks"
chef_repo_data_bags = "#{chef_repo}/data_bags"
chefknife_version = '0.1.26'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: chefknife COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     environments: Upload ALL Chef environments to ALL Chef servers!"
  opt.separator  "     environment: Upload single Chef environment to ALL Chef servers."
  opt.separator  "     roles: Upload ALL Chef roles to ALL Chef servers!"
  opt.separator  "     role: Upload single role to ALL Chef servers."
  opt.separator  "     data_bags: Upload ALL Chef data bags to ALL Chef servers!"
  opt.separator  "     data_bags_chef_server: Upload ALL Chef data bags to single Chef server."
  opt.separator  "     data_bag: Upload single data bag to ALL Chef servers."
  opt.separator  "     cookbooks: Upload ALL Chef cookbooks to ALL Chef servers!"
  opt.separator  "     cookbook: Upload single cookbook to ALL Chef servers."
  opt.separator  "     dump_nodes: Dump ALL nodes from single Chef server as .json."
  opt.separator  "     create_bags: Create data bag object for ALL data bags!"
  opt.separator  "     compare: Compares cookbooks version from ALL Chef servers."
  opt.separator  "     version: Print verison of chefknife."
  opt.separator  ""
  opt.separator  "Options"

  opt.on("-h","--help","help") do
    puts opt_parser
  end
end

opt_parser.parse!

case ARGV[0]
when "environments"

  puts "Uploading ALL environments to ALL Chef server..."

  # Declare array.
  knife_configs = []

  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload single environment to ALL Chef servers.
  for config in knife_configs
  
    # Uncomment lines below to debug.
    #puts "Knife configs: #{config}"

    # Get list of Chef environments.
    Dir.chdir("#{chef_repo_environments}")
    Dir.glob("*.{json,js,rb}") do |f|
      #puts "Chef environment: #{f}"
      #Upload ALL environmentS to ALL Chef servers.
      system("knife environment from file #{f} -c #{config}")
    end

  end

  # Get list of Chef environments.
  Dir.chdir("#{chef_repo_environments}")
  Dir.glob("*.{json,js,rb}") do |f|
    #puts "Chef environment: #{f}"
    system("knife environment from file #{f}") 
  end

when "environment"
puts "Uploading environment #{ARGV[1]} to ALL Chef servers..."

  # Declare array.
  knife_configs = []

  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload single environment to ALL Chef servers.
  for config in knife_configs

    # Uncomment lines below to debug.
    #puts "Environment name: #{ARGV[1]}"
    #puts "Knife configs: #{config}"

    # Upload single environment to ALL Chef servers.
    system("knife environment from file #{chef_repo_environments}/#{ARGV[1]} -c #{config}")

  end

when "show"
puts "Cookbook versions for #{ARGV[1]}."

  # Declare array.
  knife_configs = []
  version = ''

  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & print version of single cookbook on ALL Chef servers.
  for config in knife_configs

    # Uncomment lines below to debug.
    #puts "cookbook name: #{ARGV[1]}"
    #puts "Knife configs: #{config}"

    # Show version of single cookbook on ALL Chef servers.
    version = `knife cookbook show #{ARGV[1]} -c #{config} |awk '{ print $2 }'`

    # Print cookbook version.
    knife_config = "#{config}"
    knife_config = knife_config.split('/')[4]
    puts "Knife Config: #{knife_config}\t\t\tVersion: #{version}"

  end

  # Build URL.
  base_url = 'https://supermarket.chef.io/api/'
  api_version = 'v1'
  url = "#{base_url}/#{api_version}/cookbooks/#{ARGV[1]}"

  # Setup HTTPS connection to Chef's Supermarket API.
  conn = Faraday.new(:url => "#{url}") do |faraday|
    faraday.request  :url_encoded             # form-encode POST params
    faraday.adapter  Faraday.default_adapter  # make requests with Net::HTTP
    faraday.response :json, :content_type => /\bjson$/
  end

  # Make HTTPS GET request against API.
  response = conn.get "#{url}"
  #response.body

  # Save cookbook name stats from header response.
  cookbook = response.body
  version = cookbook['latest_version'].to_s
  version = version.split('/')[8]

  # Print out basic character facts.
  #puts "Latest Community Version: " + cookbook['latest_version'].to_s
  puts "Latest Community Version: " + "#{version}"

when "role"

 puts "Uploading role #{ARGV[1]} to ALL Chef servers..."

  # Declare array.
  knife_configs = []

  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload single role to ALL Chef servers.
  for config in knife_configs

    # Uncomment lines below to debug.
    #puts "Role name is: #{ARGV[1]}"
    #puts "Knife configs: #{config}"   

    # Upload single role to ALL Chef servers.
    system("knife role from file #{chef_repo_roles}/#{ARGV[1]} -c #{config}")

  end

when "roles"

  puts "Uploading ALL roleS to ALL Chef servers..."

  # Declare array.
  knife_configs = []
  
  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload single role to ALL Chef servers.
  for config in knife_configs

    # Uncomment lines below to debug.
    #puts "Knife configs: #{config}"

    # Get list of Chef roles.
    Dir.chdir("#{chef_repo_roles}")
    Dir.glob("*.{json,js,rb}") do |f|
      #puts "Chef role: #{f}"
      system("knife role from file #{f} -c #{config}")
    end

  end

when "cookbooks"

  puts "Uploading ALL cookbooks to ALL Chef servers..."
 
   # Declare array.
  knife_configs = []
 
  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload ALL cookbooks to ALL Chef servers.
  for config in knife_configs

    # Uncomment lines below to debug.
    #puts "Knife configs: #{config}"

    # Get list of OpsChef cookbooks.
    Dir.chdir("#{chef_repo_cookbooks}")
    Dir.glob("*") do |f|
      #puts "Chef cookbook: #{f}"
      system("knife cookbook upload #{f} -c #{config}")
    end
  
  end

when "cookbook"

  puts "Uploading cookbook #{ARGV[1]} to ALL Chef servers..."

  # Declare array.
  knife_configs = []
  
  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload single cookbook to ALL Chef servers.
  for config in knife_configs

    # Uncomment lines below to debug.
    #puts "Cookbook name is: #{ARGV[1]}"
    #puts "Knife configs: #{config}"

    # Upload cookbook to ALL Chef servers.
    system("knife cookbook upload #{ARGV[1]} -c #{config}")
 
  end

when "data_bags"
  puts "Uploading ALL data bags to ALL Chef servers..."

  # Declare array.
  knife_configs = []

  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload ALL data bags to ALL Chef servers.
  for config in knife_configs

    # Uncomment line below to debug.
    #puts "Knife configs: #{config}"

    # Get recursive list of data bag items.
    Dir.chdir("#{chef_repo_data_bags}")
    # Valid items are .json, .js. & .rb.
    data_bags = File.join("**","*.{json,js,rb}")

    Dir.glob(data_bags) do |item|

    # Get data bag item.
    #data_bag_item = "#{item}"
    #puts "data bag item: #{data_bag_item}"

    data_bag = "#{item}"
    db_name = data_bag.sub /\/[a..z][0..9].json$/, ''
    db_name = data_bag.split("/").first

    #puts "data_bag var = #{data_bag}"
    #puts "data bag = #{db_name}"
    puts "knife data bag from file #{db_name} #{chef_repo_data_bags}/#{item} -c #{config}"

  end

 end

when "data_bags_chef_server"
  puts "Uploading ALL data bag items to single Chef server..."

    # Get recursive list of data bag items.
    Dir.chdir("#{chef_repo_data_bags}")
    # Valid items are .json, .js. & .rb.
    data_bags = File.join("**","*.{json,js,rb}")

    Dir.glob(data_bags) do |item|

    # Get data bag item.
    data_bag_item = "#{item}"
    #puts "data bag item: #{data_bag_item}"

    data_bag = "#{item}"
    db_name = data_bag.sub /\/[a..z][0..9].json$/, ''
    db_name = data_bag.split("/").first

    #puts "data_bag var = #{data_bag}"
    #puts "data bag = #{db_name}"
    #puts "knife data bag from file #{db_name} #{chef_repo_data_bags}/#{item}"
    system("knife data bag from file #{db_name} #{chef_repo_data_bags}/#{item}")
  
end

when "data_bag"

  puts "Uploading data bag item #{ARGV[1]}/#{ARGV[2]} to ALL Chef servers..."

  # Declare array.
  knife_configs = []

  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload single data bag to ALL Chef servers.
  for config in knife_configs

    # Uncomment lines below to debug.
    #puts "Data bag name is: #{ARGV[1]}"
    #puts "Knife configs: #{config}"

    # Upload single data bag to ALL Chef servers.
    system("knife data bag from file #{ARGV[1]} #{ARGV[2]} -c #{config}")

  end

when "version"

  # Print version of chefknife. Same as cookbook version.
  puts "chefknife version #{chefknife_version}"

when "dump_nodes"

  # Dump ALL nodes from a single Chef server.
  puts "Dumping ALL Chef nodes to #{ARGV[2]}..."

  # Declare array to save nodes.
  nodes = []

    # Save list of nodes to array.
    nodes = `knife node list`.split

    # Loop each node and dump definition.
    for node in nodes

      # Uncomment to debug.
      # puts "Node name: #{node}"

      if "#{ARGV[1]}" == 'json'
        # Dump definition of each node via knife.
        system("knife node show #{node} -Fj > #{ARGV[2]}/#{node}.json")
      end

    end

when "create_bags"

  # Create initial data bag object for ALL data bags
  # in chef-hosted/data_bags. Useful for ErChef upgrades
  # or deploying a new ErChef server.
  
  # Get list of data bags.
  Dir.chdir("#{chef_repo_data_bags}")
  Dir.glob("*") do |dbag|

    puts "Creating Data bag #{dbag} ..."

    # Create initial data bag object for ALL data bags.
    system("knife data bag create #{dbag} --server-url #{ARGV[1]}")

  end

when "compareckbk"

  puts "Auditing Chef cookbook #{ARGV[1]} on ALL Chef servers..."

  # Declare array.
  knife_configs = []
  cookbook_location_cmd = ""

  # Read chefknife config & get knife.rb list.
  knife_configs = File.open("#{chef_knife_config}").drop(2).map.each do |line|
    line.chomp!
    line.split('~~')[1]
  end

  # Loop array & Upload single data bag to ALL Chef servers.
  for config in knife_configs

    # Uncomment lines below to debug.
    #puts "Cookbook name is: #{ARGV[1]}"
    #puts "Knife configs: #{config}"

    # Print cookbook location from Berkshelf.
    cookbook_location = `grep #{ARGV[1]} #{chef_repo}/Berksfile |awk '{ print $4 }'`
    cookbook_version = `knife cookbook show #{ARGV[1]} -c #{config} |awk '{ print $2 }'`
    chef_server_url = `grep chef_server_url #{config} |awk '{ print $2 }'`
    colored_cookbook_version = "#{cookbook_version}".colorize(:green)

    # Print latest cookbook version & Chef server. 
    puts "Version: #{colored_cookbook_version} Server: #{chef_server_url}  location: #{cookbook_location}"

    knife_config_hosted = `grep cink-hosted /etc/chef/chefknife |awk -F "~~" '{ print $2 }'`
    knife_config_chef02 = `grep staging /etc/chef/chefknife |awk -F "~~" '{ print $2 }'`
    puts "hosted config: #{knife_config_hosted}"
    puts "chef02 config: #{knife_config_chef02}"
    cookbook_version_chef02 = `knife cookbook show #{ARGV[1]} -c #{knife_config_chef02}`
    cookbook_version_chef02.delete! 'chefknife'
    new_cookbook_version_chef02 = ""
    new_cookbook_version_chef02 = /\d+\.\d+\.\d+/.match("#{cookbook_version_chef02}")
    final_cookbook_version_chef02 = new_cookbook_version_chef02.to_s

    cookbook_version_hosted = `knife cookbook show #{ARGV[1]} -c #{knife_config_hosted}`
    cookbook_version_hosted.delete! 'chefknife'
    new_cookbook_version_hosted = ""
    new_cookbook_version_hosted = /\d+\.\d+\.\d+/.match("#{cookbook_version_hosted}")
    final_cookbook_version_hosted = new_cookbook_version_hosted.to_s
    colored_var = "Don't" 
    

  end

    if /\d+\.\d+\.\d+/.match("#{final_cookbook_version_chef02}") === /\d+\.\d+\.\d+/.match("#{final_cookbook_version_hosted}") then
      puts "Cookbook versions match!"
    else
      puts "Cookbook versions" + " Don't".colorize(:red) + " match! Did someone forget to promote? \u{1F440}"
    end

else
  puts opt_parser
end
